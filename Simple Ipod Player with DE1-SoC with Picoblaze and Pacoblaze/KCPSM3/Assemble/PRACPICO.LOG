KCPSM3 Assembler log file for program 'pracpico.psm'.
Generated by KCPSM3 version 1.30
Ken Chapman (Xilinx Ltd) 2005.
21Feb2020-21:20:01

 Addr Code

 000                                 ; KCPSM3 Program - Practice Picoblaze on Spartan-3A Starter Kit.
 000                                 ;
 000                                 ;
 000                                 ;
 000                                 ;
 000                                 ; The 8 LEDs provide a simple 'heart beat' counter driven by interrupts generated at
 000                                 ; one second intervals.
 000                                 ;
 000                                 ;
 000                                 ;**************************************************************************************
 000                                 ; Port definitions
 000                                 ;**************************************************************************************
 000                                 ;
 000                                 ;
 000                                 ;
 000                                 CONSTANT LED_port, 80               ;8 simple LEDs. Is an OUTPUT port.
 000                                 CONSTANT DATA_IN_PORT, 00           ;input data port. this is an INPUT port.
 000                                 ;
 000                                 ;
 000                                 ;
 000                                 ; LCD interface ports
 000                                 ;
 000                                 ; The 8-bit communication interface can be used on the Spartan-3A Starter Kit
 000                                 ; as all pins are connected and dedicated.
 000                                 ;
 000                                 CONSTANT LCD_output_port, 40        ;LCD character module output data
 000                                 CONSTANT LCD_input_port, 01         ;LCD character module input data
 000                                 CONSTANT LCD_DB0, 01                ;   8-bit          DB4 - bit0
 000                                 CONSTANT LCD_DB1, 02                ;   interface      DB5 - bit1
 000                                 CONSTANT LCD_DB2, 04                ;                  DB6 - bit2
 000                                 CONSTANT LCD_DB3, 08                ;                  DB7 - bit3
 000                                 CONSTANT LCD_DB4, 10                ;                  DB4 - bit4
 000                                 CONSTANT LCD_DB5, 20                ;                  DB5 - bit5
 000                                 CONSTANT LCD_DB6, 40                ;                  DB6 - bit6
 000                                 CONSTANT LCD_DB7, 80                ;                  DB7 - bit7
 000                                 ;
 000                                 CONSTANT LCD_control_port, 20       ;LCD character module control signals
 000                                 CONSTANT LCD_E, 01                  ;   active High Enable        E - bit0
 000                                 CONSTANT LCD_RW, 02                 ;   Read=1 Write=0           RW - bit1
 000                                 CONSTANT LCD_RS, 04                 ;   Instruction=0 Data=1     RS - bit2
 000                                 ;**************************************************************************************
 000                                 ; Special Register usage
 000                                 ;**************************************************************************************
 000                                 ;
 000                                 ; No registers are given special names in this program.
 000                                 ;
 000                                 ;**************************************************************************************
 000                                 ; Scratch Pad Memory Locations
 000                                 ;**************************************************************************************
 000                                 ;
 000                                 ;
 000                                 CONSTANT ISR_preserve_s0, 00        ;Preserve s0 contents during ISR
 000                                 CONSTANT ISR_preserve_s1, 01        ;Preserve s1 contents during ISR
 000                                 CONSTANT ISR_preserve_s2, 02        ;Preserve s2 contents during ISR
 000                                 CONSTANT ISR_preserve_s3, 03        ;Preserve s3 contents during ISR
 000                                 ;
 000                                 CONSTANT LED_pattern, 04            ;remember state of LEDs (8-bit counter in this case)
 000                                 ;
 000                                 ;**************************************************************************************
 000                                 ; Useful data constants
 000                                 ;**************************************************************************************
 000                                 ;
 000                                 ;
 000                                 ; Constant to define a software delay of 1us. This must be adjusted to reflect the
 000                                 ; clock applied to KCPSM3. Every instruction executes in 2 clock cycles making the
 000                                 ; calculation highly predictable. The '6' in the following equation even allows for
 000                                 ; 'CALL delay_1us' instruction in the initiating code.
 000                                 ;
 000                                 ; delay_1us_constant =  (clock_rate - 6)/4       Where 'clock_rate' is in MHz
 000                                 ;
 000                                 ; Example: For a 50MHz clock the constant value is (10-6)/4 = 11  (0B Hex).
 000                                 ; For clock rates below 10MHz the value of 1 must be used and the operation will
 000                                 ; become lower than intended. Interrupts may effect the timing of software based
 000                                 ; delays.
 000                                 ;
 000                                 CONSTANT delay_1us_constant, 05
 000                                 ;
 000                                 ;
 000                                 ;
 000                                 ; ASCII table
 000                                 ;
 000                                 CONSTANT character_a, 61
 000                                 CONSTANT character_b, 62
 000                                 CONSTANT character_c, 63
 000                                 CONSTANT character_d, 64
 000                                 CONSTANT character_e, 65
 000                                 CONSTANT character_f, 66
 000                                 CONSTANT character_g, 67
 000                                 CONSTANT character_h, 68
 000                                 CONSTANT character_i, 69
 000                                 CONSTANT character_j, 6A
 000                                 CONSTANT character_k, 6B
 000                                 CONSTANT character_l, 6C
 000                                 CONSTANT character_m, 6D
 000                                 CONSTANT character_n, 6E
 000                                 CONSTANT character_o, 6F
 000                                 CONSTANT character_p, 70
 000                                 CONSTANT character_q, 71
 000                                 CONSTANT character_r, 72
 000                                 CONSTANT character_s, 73
 000                                 CONSTANT character_t, 74
 000                                 CONSTANT character_u, 75
 000                                 CONSTANT character_v, 76
 000                                 CONSTANT character_w, 77
 000                                 CONSTANT character_x, 78
 000                                 CONSTANT character_y, 79
 000                                 CONSTANT character_z, 7A
 000                                 CONSTANT character_A, 41
 000                                 CONSTANT character_B, 42
 000                                 CONSTANT character_C, 43
 000                                 CONSTANT character_D, 44
 000                                 CONSTANT character_E, 45
 000                                 CONSTANT character_F, 46
 000                                 CONSTANT character_G, 47
 000                                 CONSTANT character_H, 48
 000                                 CONSTANT character_I, 49
 000                                 CONSTANT character_J, 4A
 000                                 CONSTANT character_K, 4B
 000                                 CONSTANT character_L, 4C
 000                                 CONSTANT character_M, 4D
 000                                 CONSTANT character_N, 4E
 000                                 CONSTANT character_O, 4F
 000                                 CONSTANT character_P, 50
 000                                 CONSTANT character_Q, 51
 000                                 CONSTANT character_R, 52
 000                                 CONSTANT character_S, 53
 000                                 CONSTANT character_T, 54
 000                                 CONSTANT character_U, 55
 000                                 CONSTANT character_V, 56
 000                                 CONSTANT character_W, 57
 000                                 CONSTANT character_X, 58
 000                                 CONSTANT character_Y, 59
 000                                 CONSTANT character_Z, 5A
 000                                 CONSTANT character_0, 30
 000                                 CONSTANT character_1, 31
 000                                 CONSTANT character_2, 32
 000                                 CONSTANT character_3, 33
 000                                 CONSTANT character_4, 34
 000                                 CONSTANT character_5, 35
 000                                 CONSTANT character_6, 36
 000                                 CONSTANT character_7, 37
 000                                 CONSTANT character_8, 38
 000                                 CONSTANT character_9, 39
 000                                 CONSTANT character_colon, 3A
 000                                 CONSTANT character_stop, 2E
 000                                 CONSTANT character_semi_colon, 3B
 000                                 CONSTANT character_minus, 2D
 000                                 CONSTANT character_divide, 2F       ;'/'
 000                                 CONSTANT character_plus, 2B
 000                                 CONSTANT character_comma, 2C
 000                                 CONSTANT character_less_than, 3C
 000                                 CONSTANT character_greater_than, 3E
 000                                 CONSTANT character_equals, 3D
 000                                 CONSTANT character_space, 20
 000                                 CONSTANT character_CR, 0D           ;carriage return
 000                                 CONSTANT character_question, 3F     ;'?'
 000                                 CONSTANT character_dollar, 24
 000                                 CONSTANT character_exclaim, 21      ;'!'
 000                                 CONSTANT character_BS, 08           ;Back Space command character
 000                                 ;
 000                                 ;
 000                                 ;
 000                                 ;
 000                                 ;
 000                                 ;**************************************************************************************
 000                                 ; Initialise the system
 000                                 ;**************************************************************************************
 000                                 ;
 000  00000              cold_start: LOAD s0, 00                         ;clear 1 second counter and clear LEDs
 001  2E004                          STORE s0, LED_pattern[04]
 002  2C080                          OUTPUT s0, LED_port[80]
 003                                 ;
 003  3C001                          ENABLE INTERRUPT                    ;enable one second heart beat
 004                                 ;
 004  3008E                          CALL LCD_reset[08E]                 ;initialise LCD display
 005                                 ;
 005                                 ;**************************************************************************************
 005                                 ; Main program
 005                                 ;**************************************************************************************
 005                                 ;
 005                                 ; Display welcome message for design
 005                                 ;
 005  00510            main_program: LOAD s5, 10                         ;Line 1 position 0
 006  3009F                          CALL LCD_cursor[09F]
 007  30036                          CALL disp_line1[036]                ;Display a message
 008  00520                          LOAD s5, 20                         ;Line 2 position 0
 009  3009F                          CALL LCD_cursor[09F]
 00A  30048                          CALL disp_line2[048]                ;Display a message
 00B  3006B                          CALL delay_1s[06B]                  ;
 00C  04000          check_switches: INPUT s0, DATA_IN_PORT[00]          ;get status of switches
 00D  14000                          COMPARE s0, 00                      ;test to see if switches are 0
 00E  35012                          JUMP Z, just_clear_the_display[012] ;if the switches are 0, then just clear the display
 00F  300A9                          CALL LCD_shift_left[0A9]            ;if the switches are not 0, then shift the display left
 010  3006B                          CALL delay_1s[06B]                  ;
 011  3400C                          JUMP check_switches[00C]            ;
 012         just_clear_the_display: ;if the switches are 0, then just clear the display
 012  3009A                          CALL LCD_clear[09A]                 ;
 013  3006B                          CALL delay_1s[06B]                  ;
 014  34005                          JUMP main_program[005]              ;
 015                                 ;
 015                                 ;**************************************************************************************
 015                                 ; Routines to display hexadecimal values on LCD display
 015                                 ;**************************************************************************************
 015                                 ;
 015                                 ;
 015                                 ; Convert hexadecimal value provided in register s0 into ASCII characters
 015                                 ;
 015                                 ; The value provided must can be any value in the range 00 to FF and will be converted into
 015                                 ; two ASCII characters.
 015                                 ;     The upper nibble will be represented by an ASCII character returned in register s3.
 015                                 ;     The lower nibble will be represented by an ASCII character returned in register s2.
 015                                 ;
 015                                 ; The ASCII representations of '0' to '9' are 30 to 39 hexadecimal which is simply 30 hex
 015                                 ; added to the actual decimal value. The ASCII representations of 'A' to 'F' are 41 to 46
 015                                 ; hexadecimal requiring a further addition of 07 to the 30 already added.
 015                                 ;
 015                                 ; Registers used s0, s2 and s3.
 015                                 ;
 015  01200       hex_byte_to_ASCII: LOAD s2, s0                         ;remember value supplied
 016  2000E                          SR0 s0                              ;isolate upper nibble
 017  2000E                          SR0 s0
 018  2000E                          SR0 s0
 019  2000E                          SR0 s0
 01A  30021                          CALL hex_to_ASCII[021]              ;convert
 01B  01300                          LOAD s3, s0                         ;upper nibble value in s3
 01C  01020                          LOAD s0, s2                         ;restore complete value
 01D  0A00F                          AND s0, 0F                          ;isolate lower nibble
 01E  30021                          CALL hex_to_ASCII[021]              ;convert
 01F  01200                          LOAD s2, s0                         ;lower nibble value in s2
 020  2A000                          RETURN
 021                                 ;
 021                                 ; Convert hexadecimal value provided in register s0 into ASCII character
 021                                 ;
 021                                 ;Register used s0
 021                                 ;
 021  1C00A            hex_to_ASCII: SUB s0, 0A                          ;test if value is in range 0 to 9
 022  35824                          JUMP C, number_char[024]
 023  18007                          ADD s0, 07                          ;ASCII char A to F in range 41 to 46
 024  1803A             number_char: ADD s0, 3A                          ;ASCII char 0 to 9 in range 30 to 40
 025  2A000                          RETURN
 026                                 ;
 026                                 ;
 026                                 ; Display the two character HEX value of the register contents 's0' on the LCD
 026                                 ; at the current cursor position.
 026                                 ;
 026                                 ; Registers used s0, s1, s2, s3, s4, s5
 026                                 ;
 026  30015        display_hex_byte: CALL hex_byte_to_ASCII[015]
 027  01530                          LOAD s5, s3
 028  30076                          CALL LCD_write_data[076]
 029  01520                          LOAD s5, s2
 02A  30076                          CALL LCD_write_data[076]
 02B  2A000                          RETURN
 02C                                 ;
 02C                                 ;
 02C                                 ;
 02C                                 ; Display the 32-bit value stored in 4 ascending memory locations as an 8 character
 02C                                 ; HEX value at the current cursor position. Register s7 must contain the memory
 02C                                 ; location of the most significant byte (which is also the highest address).
 02C                                 ;
 02C                                 ; Registers used s0, s1, s2, s3, s4, s5, s6, s7
 02C                                 ;
 02C  00604      display_hex_32_bit: LOAD s6, 04                         ;4 bytes to display
 02D  07070             disp32_loop: FETCH s0, (s7)                      ;read byte
 02E  30026                          CALL display_hex_byte[026]          ;display byte
 02F  1C701                          SUB s7, 01                          ;decrement pointer
 030  1C601                          SUB s6, 01                          ;count bytes displayed
 031  2B000                          RETURN Z
 032  3402D                          JUMP disp32_loop[02D]
 033                                 ;
 033                                 ;
 033                                 ;**************************************************************************************
 033                                 ; LCD text messages
 033                                 ;**************************************************************************************
 033                                 ;
 033                                 ;
 033                                 ;
 033                                 ; Display a space on LCD at current cursor position
 033                                 ;
 033  00520              disp_space: LOAD s5, character_space[20]
 034  30076                          CALL LCD_write_data[076]
 035  2A000                          RETURN
 036                                 ;
 036                                 ; Display a message
 036                                 ;
 036  00546              disp_line1: LOAD s5, character_F[46]
 037  30076                          CALL LCD_write_data[076]
 038  00550                          LOAD s5, character_P[50]
 039  30076                          CALL LCD_write_data[076]
 03A  00547                          LOAD s5, character_G[47]
 03B  30076                          CALL LCD_write_data[076]
 03C  00541                          LOAD s5, character_A[41]
 03D  30076                          CALL LCD_write_data[076]
 03E  00573                          LOAD s5, character_s[73]
 03F  30076                          CALL LCD_write_data[076]
 040  30033                          CALL disp_space[033]
 041  00561                          LOAD s5, character_a[61]
 042  30076                          CALL LCD_write_data[076]
 043  00572                          LOAD s5, character_r[72]
 044  30076                          CALL LCD_write_data[076]
 045  00565                          LOAD s5, character_e[65]
 046  30076                          CALL LCD_write_data[076]
 047  2A000                          RETURN
 048  00574              disp_line2: LOAD s5, character_t[74]
 049  30076                          CALL LCD_write_data[076]
 04A  00568                          LOAD s5, character_h[68]
 04B  30076                          CALL LCD_write_data[076]
 04C  00565                          LOAD s5, character_e[65]
 04D  30076                          CALL LCD_write_data[076]
 04E                                 ;
 04E  30033                          CALL disp_space[033]
 04F                                 ;
 04F  00542                          LOAD s5, character_B[42]
 050  30076                          CALL LCD_write_data[076]
 051  00545                          LOAD s5, character_E[45]
 052  30076                          CALL LCD_write_data[076]
 053  00553                          LOAD s5, character_S[53]
 054  30076                          CALL LCD_write_data[076]
 055  00554                          LOAD s5, character_T[54]
 056  30076                          CALL LCD_write_data[076]
 057  2A000                          RETURN
 058                                 ;**************************************************************************************
 058                                 ; Software delay routines
 058                                 ;**************************************************************************************
 058                                 ;
 058                                 ; Delay of 1us.
 058                                 ;
 058                                 ; Constant value 'delay_1us_constant' reflects the clock applied to KCPSM3. Every
 058                                 ; instruction executes in 2 clock cycles making the calculation highly predictable.
 058                                 ; The '6' in the following equation allows for the 'CALL delay_1us' instruction used
 058                                 ; in the initiating code. Interrupts may effect software derived delays.
 058                                 ;
 058                                 ; delay_1us_constant =  (clock_rate - 6)/4       Where 'clock_rate' is in MHz
 058                                 ;
 058                                 ; Registers used s0
 058                                 ;
 058  00005               delay_1us: LOAD s0, delay_1us_constant[05]
 059  1C001                wait_1us: SUB s0, 01
 05A  35459                          JUMP NZ, wait_1us[059]
 05B  2A000                          RETURN
 05C                                 ;
 05C                                 ; Delay of 40us.
 05C                                 ;
 05C                                 ; Registers used s0, s1
 05C                                 ;
 05C  00128              delay_40us: LOAD s1, 28                         ;40 x 1us = 40us
 05D  30058               wait_40us: CALL delay_1us[058]
 05E  1C101                          SUB s1, 01
 05F  3545D                          JUMP NZ, wait_40us[05D]
 060  2A000                          RETURN
 061                                 ;
 061                                 ;
 061                                 ; Delay of 1ms.
 061                                 ;
 061                                 ; Registers used s0, s1, s2
 061                                 ;
 061  00219               delay_1ms: LOAD s2, 19                         ;25 x 40us = 1ms
 062  3005C                wait_1ms: CALL delay_40us[05C]
 063  1C201                          SUB s2, 01
 064  35462                          JUMP NZ, wait_1ms[062]
 065  2A000                          RETURN
 066                                 ;
 066                                 ; Delay of 20ms.
 066                                 ;
 066                                 ; Delay of 20ms used during initialisation.
 066                                 ;
 066                                 ; Registers used s0, s1, s2, s3
 066                                 ;
 066  00314              delay_20ms: LOAD s3, 14                         ;20 x 1ms = 20ms
 067  30061               wait_20ms: CALL delay_1ms[061]
 068  1C301                          SUB s3, 01
 069  35467                          JUMP NZ, wait_20ms[067]
 06A  2A000                          RETURN
 06B                                 ;
 06B                                 ; Delay of approximately 1 second.
 06B                                 ;
 06B                                 ; Registers used s0, s1, s2, s3, s4
 06B                                 ;
 06B  00432                delay_1s: LOAD s4, 32                         ;50 x 20ms = 1000ms
 06C  30066                 wait_1s: CALL delay_20ms[066]
 06D  1C401                          SUB s4, 01
 06E  3546C                          JUMP NZ, wait_1s[06C]
 06F  2A000                          RETURN
 070                                 ;
 070                                 ;
 070                                 ;
 070                                 ;**************************************************************************************
 070                                 ; LCD Character Module Routines
 070                                 ;**************************************************************************************
 070                                 ;
 070                                 ; LCD module is a 16 character by 2 line display but all displays are very similar
 070                                 ; On the Spartan-3A Starter Kit the 8-wire data interface can be used.
 070                                 ;
 070                                 ; The LCD modules are relatively slow and software delay loops are used to slow down
 070                                 ; KCPSM3 adequately for the LCD to communicate. The delay routines are provided in
 070                                 ; a different section (see above in this case).
 070                                 ;
 070                                 ;
 070                                 ;
 070                                 ; Write 8-bit instruction to LCD display.
 070                                 ;
 070                                 ; The 8-bit instruction should be provided in register s5.
 070                                 ; After writing there is a delay >40us to allow time for the LCD process the instruction.
 070                                 ;
 070                                 ; Registers used s0,s1,s4,s5
 070                                 ;
 070  2C540          LCD_write_inst: OUTPUT s5, LCD_output_port[40]      ;data output
 071  00400                          LOAD s4, 00                         ;RS=0 Instruction, RW=0 Write, E=0
 072  2C420                          OUTPUT s4, LCD_control_port[20]
 073  30088                          CALL LCD_pulse_E[088]
 074  3005C                          CALL delay_40us[05C]                ;wait >40us
 075  2A000                          RETURN
 076                                 ;
 076                                 ;
 076                                 ;
 076                                 ;
 076                                 ; Write 8-bit data to LCD display.
 076                                 ;
 076                                 ; The 8-bit data should be provided in register s5.
 076                                 ; After writing there is a delay >40us to allow time for the LCD process the data.
 076                                 ;
 076                                 ; Registers used s0,s1,s4,s5
 076                                 ;
 076  2C540          LCD_write_data: OUTPUT s5, LCD_output_port[40]      ;data output
 077  00404                          LOAD s4, 04                         ;RS=1 Data, RW=0 Write, E=0
 078  2C420                          OUTPUT s4, LCD_control_port[20]
 079  30088                          CALL LCD_pulse_E[088]
 07A  3005C                          CALL delay_40us[05C]                ;wait >40us
 07B  2A000                          RETURN
 07C                                 ;
 07C                                 ;
 07C                                 ;
 07C                                 ;
 07C                                 ; Read 8-bit data from LCD display.
 07C                                 ;
 07C                                 ; The 8-bit data will be read from the current LCD memory address
 07C                                 ; and will be returned in register s5.
 07C                                 ; It is advisable to set the LCD address (cursor position) before
 07C                                 ; using the data read for the first time otherwise the display may
 07C                                 ; generate invalid data on the first read.
 07C                                 ;
 07C                                 ; A delay of >40us is required after each read
 07C                                 ;
 07C                                 ; Registers used s0,s1,s4,s5
 07C                                 ;
 07C  00406           LCD_read_data: LOAD s4, 06                         ;RS=1 Data, RW=1 Read, E=0
 07D  2C420                          OUTPUT s4, LCD_control_port[20]     ;set up RS and RW >40ns before enable pulse
 07E  0E401                          XOR s4, LCD_E[01]                   ;E=1
 07F  2C420                          OUTPUT s4, LCD_control_port[20]
 080  30058                          CALL delay_1us[058]                 ;wait >260ns to access data
 081  04501                          INPUT s5, LCD_input_port[01]        ;read data
 082  0E401                          XOR s4, LCD_E[01]                   ;E=0
 083  2C420                          OUTPUT s4, LCD_control_port[20]
 084  00404                          LOAD s4, 04                         ;RS=1 Data, RW=0 Write, E=0
 085  2C420                          OUTPUT s4, LCD_control_port[20]     ;Stop reading 5V device
 086  3005C                          CALL delay_40us[05C]                ;wait >40us
 087  2A000                          RETURN
 088                                 ;
 088                                 ;
 088                                 ; Pulse LCD enable signal 'E' high for greater than 230ns (1us is used).
 088                                 ;
 088                                 ; Register s4 should define the current state of the LCD control port.
 088                                 ;
 088                                 ; Registers used s0, s4
 088                                 ;
 088  0E401             LCD_pulse_E: XOR s4, LCD_E[01]                   ;E=1
 089  2C420                          OUTPUT s4, LCD_control_port[20]
 08A  30058                          CALL delay_1us[058]
 08B  0E401                          XOR s4, LCD_E[01]                   ;E=0
 08C  2C420                          OUTPUT s4, LCD_control_port[20]
 08D  2A000                          RETURN
 08E                                 ;
 08E                                 ;
 08E                                 ;
 08E                                 ; Reset and initialise display to communicate using 8-bit data mode
 08E                                 ; Includes routine to clear the display.
 08E                                 ;
 08E                                 ; Requires the 8-bit instructions 38,38,38,28 to be sent with suitable delays
 08E                                 ; following by the 8-bit instructions to set up the display.
 08E                                 ;
 08E                                 ;  38 = '001' Function set, '1' 4-bit mode, '1' 2-line, '0' 5x7 dot matrix, 'xx'
 08E                                 ;  06 = '000001' Entry mode, '1' increment, '0' no display shift
 08E                                 ;  0C = '00001' Display control, '1' display on, '0' cursor off, '0' cursor blink off
 08E                                 ;  01 = '00000001' Display clear
 08E                                 ;
 08E                                 ; Registers used s0, s1, s2, s3, s4
 08E                                 ;
 08E  30066               LCD_reset: CALL delay_20ms[066]                ;wait more that 15ms for display to be ready
 08F  00538                          LOAD s5, 38                         ;Function set
 090  30070                          CALL LCD_write_inst[070]            ;write '38'
 091  30066                          CALL delay_20ms[066]                ;wait >4.1ms
 092  30070                          CALL LCD_write_inst[070]            ;write '38'
 093  30061                          CALL delay_1ms[061]                 ;wait >100us
 094  30070                          CALL LCD_write_inst[070]            ;write '38' and wait >40us
 095  30070                          CALL LCD_write_inst[070]            ;write 'Function Set' and wait >40us
 096  00506                          LOAD s5, 06                         ;Entry mode
 097  30070                          CALL LCD_write_inst[070]            ;write 'Entry mode' and wait >40us
 098  0050C                          LOAD s5, 0C                         ;Display control
 099  30070                          CALL LCD_write_inst[070]            ;write 'Display control' and wait >40us
 09A  00501               LCD_clear: LOAD s5, 01                         ;Display clear
 09B  30070                          CALL LCD_write_inst[070]
 09C  30061                          CALL delay_1ms[061]                 ;wait >1.64ms for display to clear
 09D  30061                          CALL delay_1ms[061]
 09E  2A000                          RETURN
 09F                                 ;
 09F                                 ;
 09F                                 ;
 09F                                 ;
 09F                                 ; Position the cursor ready for characters to be written.
 09F                                 ; The display is formed of 2 lines of 16 characters and each
 09F                                 ; position has a corresponding address as indicated below.
 09F                                 ;
 09F                                 ;                   Character position
 09F                                 ;           0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15
 09F                                 ;
 09F                                 ; Line 1 - 80 81 82 83 84 85 86 87 88 89 8A 8B 8C 8D 8E 8F
 09F                                 ; Line 2 - C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF
 09F                                 ;
 09F                                 ; This routine will set the cursor position using the value provided
 09F                                 ; in register s5. The upper nibble will define the line and the lower
 09F                                 ; nibble the character position on the line.
 09F                                 ; Example s5 = 2B will position the cursor on line 2 position 11
 09F                                 ;
 09F                                 ; Registers used s0, s1, s2, s3, s4
 09F                                 ;
 09F  12510              LCD_cursor: TEST s5, 10                         ;test for line 1
 0A0  350A5                          JUMP Z, set_line2[0A5]
 0A1  0A50F                          AND s5, 0F                          ;make address in range 80 to 8F for line 1
 0A2  0C580                          OR s5, 80
 0A3  30070                          CALL LCD_write_inst[070]            ;instruction write to set cursor
 0A4  2A000                          RETURN
 0A5  0A50F               set_line2: AND s5, 0F                          ;make address in range C0 to CF for line 2
 0A6  0C5C0                          OR s5, C0
 0A7  30070                          CALL LCD_write_inst[070]            ;instruction write to set cursor
 0A8  2A000                          RETURN
 0A9                                 ;
 0A9                                 ;
 0A9                                 ;
 0A9                                 ;
 0A9                                 ; This routine will shift the complete display one position to the left.
 0A9                                 ; The cursor position and LCD memory contents will not change.
 0A9                                 ;
 0A9                                 ;
 0A9                                 ; Registers used s0, s1, s2, s3, s4, s5
 0A9                                 ;
 0A9  00518          LCD_shift_left: LOAD s5, 18                         ;shift display left
 0AA  30070                          CALL LCD_write_inst[070]
 0AB  2A000                          RETURN
 0AC                                 ;
 0AC                                 ;
 0AC                                 ;
 0AC                                 ;**************************************************************************************
 0AC                                 ; Interrupt Service Routine (ISR)
 0AC                                 ;**************************************************************************************
 0AC                                 ;
 0AC                                 ; The interrupt is used purely to provide a 1 second heart beat binary counter pattern
 0AC                                 ; on the 8 LEDs.
 0AC                                 ;
 0AC  2E000                     ISR: STORE s0, ISR_preserve_s0[00]       ;preserve register
 0AD  06004                          FETCH s0, LED_pattern[04]           ;read current counter value
 0AE  18001                          ADD s0, 01                          ;increment counter
 0AF  2E004                          STORE s0, LED_pattern[04]           ;store new counter value
 0B0  2C080                          OUTPUT s0, LED_port[80]             ;display counter value on LEDs
 0B1  06000                          FETCH s0, ISR_preserve_s0[00]       ;restore register
 0B2  38001                          RETURNI ENABLE
 0B3                                 ;
 0B3                                 ;
 0B3                                 ;**************************************************************************************
 0B3                                 ; Interrupt Vector
 0B3                                 ;**************************************************************************************
 0B3                                 ;
 3FF                                 ADDRESS 3FF
 3FF  340AC                          JUMP ISR[0AC]
 3FF                                 ;
 3FF                                 ;
